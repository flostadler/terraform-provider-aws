// Code generated by internal/generate/tagstests/main.go; DO NOT EDIT.

package accessanalyzer_test

import (
	"testing"

	"github.com/aws/aws-sdk-go-v2/service/accessanalyzer/types"
	"github.com/hashicorp/terraform-plugin-testing/config"
	sdkacctest "github.com/hashicorp/terraform-plugin-testing/helper/acctest"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/plancheck"
	"github.com/hashicorp/terraform-plugin-testing/tfjsonpath"
	"github.com/hashicorp/terraform-provider-aws/internal/acctest"
	"github.com/hashicorp/terraform-provider-aws/names"
)

func testAccAccessAnalyzerAnalyzer_tagsSerial(t *testing.T) {
	t.Helper()

	t.Run("basic", testAccAccessAnalyzerAnalyzer_tags)
	t.Run("null", testAccAccessAnalyzerAnalyzer_tags_null)
	t.Run("AddOnUpdate", testAccAccessAnalyzerAnalyzer_tags_AddOnUpdate)
	t.Run("EmptyTag_OnCreate", testAccAccessAnalyzerAnalyzer_tags_EmptyTag_OnCreate)
	t.Run("EmptyTag_OnUpdate_Add", testAccAccessAnalyzerAnalyzer_tags_EmptyTag_OnUpdate_Add)
	t.Run("EmptyTag_OnUpdate_Replace", testAccAccessAnalyzerAnalyzer_tags_EmptyTag_OnUpdate_Replace)
	t.Run("DefaultTags_providerOnly", testAccAccessAnalyzerAnalyzer_tags_DefaultTags_providerOnly)
	t.Run("DefaultTags_nonOverlapping", testAccAccessAnalyzerAnalyzer_tags_DefaultTags_nonOverlapping)
	t.Run("DefaultTags_overlapping", testAccAccessAnalyzerAnalyzer_tags_DefaultTags_overlapping)
	t.Run("DefaultTags_updateToProviderOnly", testAccAccessAnalyzerAnalyzer_tags_DefaultTags_updateToProviderOnly)
	t.Run("DefaultTags_updateToResourceOnly", testAccAccessAnalyzerAnalyzer_tags_DefaultTags_updateToResourceOnly)
	t.Run("DefaultTags_emptyResourceTag", testAccAccessAnalyzerAnalyzer_tags_DefaultTags_emptyResourceTag)
	t.Run("DefaultTags_nullOverlappingResourceTag", testAccAccessAnalyzerAnalyzer_tags_DefaultTags_nullOverlappingResourceTag)
	t.Run("DefaultTags_nullNonOverlappingResourceTag", testAccAccessAnalyzerAnalyzer_tags_DefaultTags_nullNonOverlappingResourceTag)
	t.Run("ComputedTag_OnCreate", testAccAccessAnalyzerAnalyzer_tags_ComputedTag_OnCreate)
	t.Run("ComputedTag_OnUpdate_Add", testAccAccessAnalyzerAnalyzer_tags_ComputedTag_OnUpdate_Add)
	t.Run("ComputedTag_OnUpdate_Replace", testAccAccessAnalyzerAnalyzer_tags_ComputedTag_OnUpdate_Replace)
}

func testAccAccessAnalyzerAnalyzer_tags(t *testing.T) {
	ctx := acctest.Context(t)
	var v types.AnalyzerSummary
	resourceName := "aws_accessanalyzer_analyzer.test"
	rName := sdkacctest.RandomWithPrefix(acctest.ResourcePrefix)

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { acctest.PreCheck(ctx, t); testAccPreCheck(ctx, t) },
		ErrorCheck:               acctest.ErrorCheck(t, names.AccessAnalyzerServiceID),
		CheckDestroy:             testAccCheckAnalyzerDestroy(ctx),
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
		Steps: []resource.TestStep{
			{
				ConfigDirectory: config.StaticDirectory("testdata/Analyzer/tags/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckAnalyzerExists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, acctest.CtOne),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", "value1"),
				),
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/Analyzer/tags/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
				},
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/Analyzer/tags/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1updated"),
						"key2": config.StringVariable("value2"),
					}),
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckAnalyzerExists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, acctest.CtTwo),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", "value1updated"),
					resource.TestCheckResourceAttr(resourceName, "tags.key2", "value2"),
				),
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/Analyzer/tags/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1updated"),
						"key2": config.StringVariable("value2"),
					}),
				},
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/Analyzer/tags/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key2": config.StringVariable("value2"),
					}),
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckAnalyzerExists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, acctest.CtOne),
					resource.TestCheckResourceAttr(resourceName, "tags.key2", "value2"),
				),
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/Analyzer/tags/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key2": config.StringVariable("value2"),
					}),
				},
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/Analyzer/tags/"),
				ConfigVariables: config.Variables{
					"rName":         config.StringVariable(rName),
					"resource_tags": nil,
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckAnalyzerExists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, acctest.CtZero),
				),
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/Analyzer/tags/"),
				ConfigVariables: config.Variables{
					"rName":         config.StringVariable(rName),
					"resource_tags": nil,
				},
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccAccessAnalyzerAnalyzer_tags_null(t *testing.T) {
	ctx := acctest.Context(t)
	var v types.AnalyzerSummary
	resourceName := "aws_accessanalyzer_analyzer.test"
	rName := sdkacctest.RandomWithPrefix(acctest.ResourcePrefix)

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { acctest.PreCheck(ctx, t); testAccPreCheck(ctx, t) },
		ErrorCheck:               acctest.ErrorCheck(t, names.AccessAnalyzerServiceID),
		CheckDestroy:             testAccCheckAnalyzerDestroy(ctx),
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
		Steps: []resource.TestStep{
			{
				ConfigDirectory: config.StaticDirectory("testdata/Analyzer/tags/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": nil,
					}),
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckAnalyzerExists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, acctest.CtZero),
				),
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/Analyzer/tags/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": nil,
					}),
				},
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/Analyzer/tags/"),
				ConfigVariables: config.Variables{
					"rName":         config.StringVariable(rName),
					"resource_tags": nil,
				},
				PlanOnly:           true,
				ExpectNonEmptyPlan: false,
			},
		},
	})
}

func testAccAccessAnalyzerAnalyzer_tags_AddOnUpdate(t *testing.T) {
	ctx := acctest.Context(t)
	var v types.AnalyzerSummary
	resourceName := "aws_accessanalyzer_analyzer.test"
	rName := sdkacctest.RandomWithPrefix(acctest.ResourcePrefix)

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { acctest.PreCheck(ctx, t); testAccPreCheck(ctx, t) },
		ErrorCheck:               acctest.ErrorCheck(t, names.AccessAnalyzerServiceID),
		CheckDestroy:             testAccCheckAnalyzerDestroy(ctx),
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
		Steps: []resource.TestStep{
			{
				ConfigDirectory: config.StaticDirectory("testdata/Analyzer/tags/"),
				ConfigVariables: config.Variables{
					"rName":         config.StringVariable(rName),
					"resource_tags": nil,
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckAnalyzerExists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, acctest.CtZero),
				),
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/Analyzer/tags/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckAnalyzerExists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, acctest.CtOne),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", "value1"),
				),
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/Analyzer/tags/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
				},
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccAccessAnalyzerAnalyzer_tags_EmptyTag_OnCreate(t *testing.T) {
	ctx := acctest.Context(t)
	var v types.AnalyzerSummary
	resourceName := "aws_accessanalyzer_analyzer.test"
	rName := sdkacctest.RandomWithPrefix(acctest.ResourcePrefix)

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { acctest.PreCheck(ctx, t); testAccPreCheck(ctx, t) },
		ErrorCheck:               acctest.ErrorCheck(t, names.AccessAnalyzerServiceID),
		CheckDestroy:             testAccCheckAnalyzerDestroy(ctx),
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
		Steps: []resource.TestStep{
			{
				ConfigDirectory: config.StaticDirectory("testdata/Analyzer/tags/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable(""),
					}),
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckAnalyzerExists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, acctest.CtOne),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", ""),
				),
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/Analyzer/tags/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable(""),
					}),
				},
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/Analyzer/tags/"),
				ConfigVariables: config.Variables{
					"rName":         config.StringVariable(rName),
					"resource_tags": nil,
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckAnalyzerExists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, acctest.CtZero),
				),
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/Analyzer/tags/"),
				ConfigVariables: config.Variables{
					"rName":         config.StringVariable(rName),
					"resource_tags": nil,
				},
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccAccessAnalyzerAnalyzer_tags_EmptyTag_OnUpdate_Add(t *testing.T) {
	ctx := acctest.Context(t)
	var v types.AnalyzerSummary
	resourceName := "aws_accessanalyzer_analyzer.test"
	rName := sdkacctest.RandomWithPrefix(acctest.ResourcePrefix)

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { acctest.PreCheck(ctx, t); testAccPreCheck(ctx, t) },
		ErrorCheck:               acctest.ErrorCheck(t, names.AccessAnalyzerServiceID),
		CheckDestroy:             testAccCheckAnalyzerDestroy(ctx),
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
		Steps: []resource.TestStep{
			{
				ConfigDirectory: config.StaticDirectory("testdata/Analyzer/tags/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckAnalyzerExists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, acctest.CtOne),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", "value1"),
				),
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/Analyzer/tags/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
						"key2": config.StringVariable(""),
					}),
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckAnalyzerExists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, acctest.CtTwo),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", "value1"),
					resource.TestCheckResourceAttr(resourceName, "tags.key2", ""),
				),
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/Analyzer/tags/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
						"key2": config.StringVariable(""),
					}),
				},
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/Analyzer/tags/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckAnalyzerExists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, acctest.CtOne),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", "value1"),
				),
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/Analyzer/tags/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
				},
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccAccessAnalyzerAnalyzer_tags_EmptyTag_OnUpdate_Replace(t *testing.T) {
	ctx := acctest.Context(t)
	var v types.AnalyzerSummary
	resourceName := "aws_accessanalyzer_analyzer.test"
	rName := sdkacctest.RandomWithPrefix(acctest.ResourcePrefix)

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { acctest.PreCheck(ctx, t); testAccPreCheck(ctx, t) },
		ErrorCheck:               acctest.ErrorCheck(t, names.AccessAnalyzerServiceID),
		CheckDestroy:             testAccCheckAnalyzerDestroy(ctx),
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
		Steps: []resource.TestStep{
			{
				ConfigDirectory: config.StaticDirectory("testdata/Analyzer/tags/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckAnalyzerExists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, acctest.CtOne),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", "value1"),
				),
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/Analyzer/tags/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable(""),
					}),
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckAnalyzerExists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, acctest.CtOne),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", ""),
				),
			},
			{
				ConfigDirectory: config.StaticDirectory("testdata/Analyzer/tags/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable(""),
					}),
				},
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccAccessAnalyzerAnalyzer_tags_DefaultTags_providerOnly(t *testing.T) {
	ctx := acctest.Context(t)
	var v types.AnalyzerSummary
	resourceName := "aws_accessanalyzer_analyzer.test"
	rName := sdkacctest.RandomWithPrefix(acctest.ResourcePrefix)

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { acctest.PreCheck(ctx, t); testAccPreCheck(ctx, t) },
		ErrorCheck:   acctest.ErrorCheck(t, names.AccessAnalyzerServiceID),
		CheckDestroy: testAccCheckAnalyzerDestroy(ctx),
		Steps: []resource.TestStep{
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tags_defaults/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
					"resource_tags": nil,
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckAnalyzerExists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, acctest.CtZero),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", acctest.CtOne),
					resource.TestCheckResourceAttr(resourceName, "tags_all.key1", "value1"),
				),
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tags_defaults/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
					"resource_tags": nil,
				},
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tags_defaults/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1updated"),
						"key2": config.StringVariable("value2"),
					}),
					"resource_tags": nil,
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckAnalyzerExists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, acctest.CtZero),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", acctest.CtTwo),
					resource.TestCheckResourceAttr(resourceName, "tags_all.key1", "value1updated"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.key2", "value2"),
				),
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tags_defaults/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1updated"),
						"key2": config.StringVariable("value2"),
					}),
					"resource_tags": nil,
				},
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tags_defaults/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"key2": config.StringVariable("value2"),
					}),
					"resource_tags": nil,
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckAnalyzerExists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, acctest.CtZero),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", acctest.CtOne),
					resource.TestCheckResourceAttr(resourceName, "tags_all.key2", "value2"),
				),
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tags_defaults/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"key2": config.StringVariable("value2"),
					}),
					"resource_tags": nil,
				},
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tags/"),
				ConfigVariables: config.Variables{
					"rName":         config.StringVariable(rName),
					"resource_tags": nil,
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckAnalyzerExists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, acctest.CtZero),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", acctest.CtZero),
				),
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tags/"),
				ConfigVariables: config.Variables{
					"rName":         config.StringVariable(rName),
					"resource_tags": nil,
				},
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccAccessAnalyzerAnalyzer_tags_DefaultTags_nonOverlapping(t *testing.T) {
	ctx := acctest.Context(t)
	var v types.AnalyzerSummary
	resourceName := "aws_accessanalyzer_analyzer.test"
	rName := sdkacctest.RandomWithPrefix(acctest.ResourcePrefix)

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { acctest.PreCheck(ctx, t); testAccPreCheck(ctx, t) },
		ErrorCheck:   acctest.ErrorCheck(t, names.AccessAnalyzerServiceID),
		CheckDestroy: testAccCheckAnalyzerDestroy(ctx),
		Steps: []resource.TestStep{
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tags_defaults/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"providerkey1": config.StringVariable("providervalue1"),
					}),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"resourcekey1": config.StringVariable("resourcevalue1"),
					}),
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckAnalyzerExists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, acctest.CtOne),
					resource.TestCheckResourceAttr(resourceName, "tags.resourcekey1", "resourcevalue1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", acctest.CtTwo),
					resource.TestCheckResourceAttr(resourceName, "tags_all.providerkey1", "providervalue1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.resourcekey1", "resourcevalue1"),
				),
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tags_defaults/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"providerkey1": config.StringVariable("providervalue1"),
					}),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"resourcekey1": config.StringVariable("resourcevalue1"),
					}),
				},
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tags_defaults/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"providerkey1": config.StringVariable("providervalue1updated"),
					}),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"resourcekey1": config.StringVariable("resourcevalue1updated"),
						"resourcekey2": config.StringVariable("resourcevalue2"),
					}),
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckAnalyzerExists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, acctest.CtTwo),
					resource.TestCheckResourceAttr(resourceName, "tags.resourcekey1", "resourcevalue1updated"),
					resource.TestCheckResourceAttr(resourceName, "tags.resourcekey2", "resourcevalue2"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", "3"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.providerkey1", "providervalue1updated"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.resourcekey1", "resourcevalue1updated"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.resourcekey2", "resourcevalue2"),
				),
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tags_defaults/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"providerkey1": config.StringVariable("providervalue1updated"),
					}),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"resourcekey1": config.StringVariable("resourcevalue1updated"),
						"resourcekey2": config.StringVariable("resourcevalue2"),
					}),
				},
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tags/"),
				ConfigVariables: config.Variables{
					"rName":         config.StringVariable(rName),
					"resource_tags": nil,
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckAnalyzerExists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, acctest.CtZero),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", acctest.CtZero),
				),
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tags/"),
				ConfigVariables: config.Variables{
					"rName":         config.StringVariable(rName),
					"resource_tags": nil,
				},
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccAccessAnalyzerAnalyzer_tags_DefaultTags_overlapping(t *testing.T) {
	ctx := acctest.Context(t)
	var v types.AnalyzerSummary
	resourceName := "aws_accessanalyzer_analyzer.test"
	rName := sdkacctest.RandomWithPrefix(acctest.ResourcePrefix)

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { acctest.PreCheck(ctx, t); testAccPreCheck(ctx, t) },
		ErrorCheck:   acctest.ErrorCheck(t, names.AccessAnalyzerServiceID),
		CheckDestroy: testAccCheckAnalyzerDestroy(ctx),
		Steps: []resource.TestStep{
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tags_defaults/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"overlapkey1": config.StringVariable("providervalue1"),
					}),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"overlapkey1": config.StringVariable("resourcevalue1"),
					}),
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckAnalyzerExists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, acctest.CtOne),
					resource.TestCheckResourceAttr(resourceName, "tags.overlapkey1", "resourcevalue1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", acctest.CtOne),
					resource.TestCheckResourceAttr(resourceName, "tags_all.overlapkey1", "resourcevalue1"),
				),
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tags_defaults/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"overlapkey1": config.StringVariable("providervalue1"),
					}),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"overlapkey1": config.StringVariable("resourcevalue1"),
					}),
				},
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tags_defaults/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"overlapkey1": config.StringVariable("providervalue1"),
						"overlapkey2": config.StringVariable("providervalue2"),
					}),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"overlapkey1": config.StringVariable("resourcevalue1"),
						"overlapkey2": config.StringVariable("resourcevalue2"),
					}),
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckAnalyzerExists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, acctest.CtTwo),
					resource.TestCheckResourceAttr(resourceName, "tags.overlapkey1", "resourcevalue1"),
					resource.TestCheckResourceAttr(resourceName, "tags.overlapkey2", "resourcevalue2"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", acctest.CtTwo),
					resource.TestCheckResourceAttr(resourceName, "tags_all.overlapkey1", "resourcevalue1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.overlapkey2", "resourcevalue2"),
				),
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tags_defaults/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"overlapkey1": config.StringVariable("providervalue1"),
						"overlapkey2": config.StringVariable("providervalue2"),
					}),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"overlapkey1": config.StringVariable("resourcevalue1"),
						"overlapkey2": config.StringVariable("resourcevalue2"),
					}),
				},
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tags_defaults/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"overlapkey1": config.StringVariable("providervalue1"),
					}),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"overlapkey1": config.StringVariable("resourcevalue2"),
					}),
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckAnalyzerExists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, acctest.CtOne),
					resource.TestCheckResourceAttr(resourceName, "tags.overlapkey1", "resourcevalue2"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", acctest.CtOne),
					resource.TestCheckResourceAttr(resourceName, "tags_all.overlapkey1", "resourcevalue2"),
				),
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tags_defaults/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"overlapkey1": config.StringVariable("providervalue1"),
					}),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"overlapkey1": config.StringVariable("resourcevalue2"),
					}),
				},
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccAccessAnalyzerAnalyzer_tags_DefaultTags_updateToProviderOnly(t *testing.T) {
	ctx := acctest.Context(t)
	var v types.AnalyzerSummary
	resourceName := "aws_accessanalyzer_analyzer.test"
	rName := sdkacctest.RandomWithPrefix(acctest.ResourcePrefix)

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { acctest.PreCheck(ctx, t); testAccPreCheck(ctx, t) },
		ErrorCheck:   acctest.ErrorCheck(t, names.AccessAnalyzerServiceID),
		CheckDestroy: testAccCheckAnalyzerDestroy(ctx),
		Steps: []resource.TestStep{
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tags/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckAnalyzerExists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, acctest.CtOne),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", "value1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", acctest.CtOne),
					resource.TestCheckResourceAttr(resourceName, "tags_all.key1", "value1"),
				),
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tags_defaults/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
					"resource_tags": nil,
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckAnalyzerExists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, acctest.CtZero),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", acctest.CtOne),
					resource.TestCheckResourceAttr(resourceName, "tags_all.key1", "value1"),
				),
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tags_defaults/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
					"resource_tags": nil,
				},
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccAccessAnalyzerAnalyzer_tags_DefaultTags_updateToResourceOnly(t *testing.T) {
	ctx := acctest.Context(t)
	var v types.AnalyzerSummary
	resourceName := "aws_accessanalyzer_analyzer.test"
	rName := sdkacctest.RandomWithPrefix(acctest.ResourcePrefix)

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { acctest.PreCheck(ctx, t); testAccPreCheck(ctx, t) },
		ErrorCheck:   acctest.ErrorCheck(t, names.AccessAnalyzerServiceID),
		CheckDestroy: testAccCheckAnalyzerDestroy(ctx),
		Steps: []resource.TestStep{
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tags_defaults/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
					"resource_tags": nil,
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckAnalyzerExists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, acctest.CtZero),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", acctest.CtOne),
					resource.TestCheckResourceAttr(resourceName, "tags_all.key1", "value1"),
				),
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tags/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckAnalyzerExists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, acctest.CtOne),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", "value1"),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", acctest.CtOne),
					resource.TestCheckResourceAttr(resourceName, "tags_all.key1", "value1"),
				),
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tags/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
				},
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccAccessAnalyzerAnalyzer_tags_DefaultTags_emptyResourceTag(t *testing.T) {
	ctx := acctest.Context(t)
	var v types.AnalyzerSummary
	resourceName := "aws_accessanalyzer_analyzer.test"
	rName := sdkacctest.RandomWithPrefix(acctest.ResourcePrefix)

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { acctest.PreCheck(ctx, t); testAccPreCheck(ctx, t) },
		ErrorCheck:   acctest.ErrorCheck(t, names.AccessAnalyzerServiceID),
		CheckDestroy: testAccCheckAnalyzerDestroy(ctx),
		Steps: []resource.TestStep{
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tags_defaults/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable(""),
					}),
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckAnalyzerExists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, acctest.CtOne),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", ""),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", acctest.CtOne),
					resource.TestCheckResourceAttr(resourceName, "tags_all.key1", ""),
				),
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tags_defaults/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable(""),
					}),
				},
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccAccessAnalyzerAnalyzer_tags_DefaultTags_nullOverlappingResourceTag(t *testing.T) {
	ctx := acctest.Context(t)
	var v types.AnalyzerSummary
	resourceName := "aws_accessanalyzer_analyzer.test"
	rName := sdkacctest.RandomWithPrefix(acctest.ResourcePrefix)

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { acctest.PreCheck(ctx, t); testAccPreCheck(ctx, t) },
		ErrorCheck:   acctest.ErrorCheck(t, names.AccessAnalyzerServiceID),
		CheckDestroy: testAccCheckAnalyzerDestroy(ctx),
		Steps: []resource.TestStep{
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tags_defaults/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("providervalue1"),
					}),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": nil,
					}),
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckAnalyzerExists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, acctest.CtZero),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", acctest.CtOne),
					resource.TestCheckResourceAttr(resourceName, "tags_all.key1", "providervalue1"),
				),
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tags_defaults/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("providervalue1"),
					}),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": nil,
					}),
				},
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccAccessAnalyzerAnalyzer_tags_DefaultTags_nullNonOverlappingResourceTag(t *testing.T) {
	ctx := acctest.Context(t)
	var v types.AnalyzerSummary
	resourceName := "aws_accessanalyzer_analyzer.test"
	rName := sdkacctest.RandomWithPrefix(acctest.ResourcePrefix)

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { acctest.PreCheck(ctx, t); testAccPreCheck(ctx, t) },
		ErrorCheck:   acctest.ErrorCheck(t, names.AccessAnalyzerServiceID),
		CheckDestroy: testAccCheckAnalyzerDestroy(ctx),
		Steps: []resource.TestStep{
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tags_defaults/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"providerkey1": config.StringVariable("providervalue1"),
					}),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"resourcekey1": nil,
					}),
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckAnalyzerExists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, acctest.CtZero),
					resource.TestCheckResourceAttr(resourceName, "tags_all.%", acctest.CtOne),
					resource.TestCheckResourceAttr(resourceName, "tags_all.providerkey1", "providervalue1"),
				),
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tags_defaults/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"provider_tags": config.MapVariable(map[string]config.Variable{
						"providerkey1": config.StringVariable("providervalue1"),
					}),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"resourcekey1": nil,
					}),
				},
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccAccessAnalyzerAnalyzer_tags_ComputedTag_OnCreate(t *testing.T) {
	ctx := acctest.Context(t)
	var v types.AnalyzerSummary
	resourceName := "aws_accessanalyzer_analyzer.test"
	rName := sdkacctest.RandomWithPrefix(acctest.ResourcePrefix)

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { acctest.PreCheck(ctx, t); testAccPreCheck(ctx, t) },
		ErrorCheck:   acctest.ErrorCheck(t, names.AccessAnalyzerServiceID),
		CheckDestroy: testAccCheckAnalyzerDestroy(ctx),
		Steps: []resource.TestStep{
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tagsComputed1/"),
				ConfigVariables: config.Variables{
					"rName":         config.StringVariable(rName),
					"unknownTagKey": config.StringVariable("computedkey1"),
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckAnalyzerExists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, acctest.CtOne),
					resource.TestCheckResourceAttrPair(resourceName, "tags.computedkey1", "null_resource.test", names.AttrID),
				),
				ConfigPlanChecks: resource.ConfigPlanChecks{
					PreApply: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction(resourceName, plancheck.ResourceActionCreate),
						plancheck.ExpectUnknownValue(resourceName, tfjsonpath.New(names.AttrTags)),
					},
					PostApplyPreRefresh: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction(resourceName, plancheck.ResourceActionNoop),
					},
					PostApplyPostRefresh: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction(resourceName, plancheck.ResourceActionNoop),
					},
				},
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tagsComputed1/"),
				ConfigVariables: config.Variables{
					"rName":         config.StringVariable(rName),
					"unknownTagKey": config.StringVariable("computedkey1"),
				},
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccAccessAnalyzerAnalyzer_tags_ComputedTag_OnUpdate_Add(t *testing.T) {
	ctx := acctest.Context(t)
	var v types.AnalyzerSummary
	resourceName := "aws_accessanalyzer_analyzer.test"
	rName := sdkacctest.RandomWithPrefix(acctest.ResourcePrefix)

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { acctest.PreCheck(ctx, t); testAccPreCheck(ctx, t) },
		ErrorCheck:   acctest.ErrorCheck(t, names.AccessAnalyzerServiceID),
		CheckDestroy: testAccCheckAnalyzerDestroy(ctx),
		Steps: []resource.TestStep{
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tags/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckAnalyzerExists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, acctest.CtOne),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", "value1"),
				),
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tagsComputed2/"),
				ConfigVariables: config.Variables{
					"rName":         config.StringVariable(rName),
					"unknownTagKey": config.StringVariable("computedkey1"),
					"knownTagKey":   config.StringVariable("key1"),
					"knownTagValue": config.StringVariable("value1"),
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckAnalyzerExists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, acctest.CtTwo),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", "value1"),
					resource.TestCheckResourceAttrPair(resourceName, "tags.computedkey1", "null_resource.test", names.AttrID),
				),
				ConfigPlanChecks: resource.ConfigPlanChecks{
					PreApply: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction(resourceName, plancheck.ResourceActionUpdate),
						plancheck.ExpectUnknownValue(resourceName, tfjsonpath.New(names.AttrTags)),
					},
					PostApplyPreRefresh: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction(resourceName, plancheck.ResourceActionNoop),
					},
					PostApplyPostRefresh: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction(resourceName, plancheck.ResourceActionNoop),
					},
				},
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tagsComputed2/"),
				ConfigVariables: config.Variables{
					"rName":         config.StringVariable(rName),
					"unknownTagKey": config.StringVariable("computedkey1"),
					"knownTagKey":   config.StringVariable("key1"),
					"knownTagValue": config.StringVariable("value1"),
				},
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func testAccAccessAnalyzerAnalyzer_tags_ComputedTag_OnUpdate_Replace(t *testing.T) {
	ctx := acctest.Context(t)
	var v types.AnalyzerSummary
	resourceName := "aws_accessanalyzer_analyzer.test"
	rName := sdkacctest.RandomWithPrefix(acctest.ResourcePrefix)

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { acctest.PreCheck(ctx, t); testAccPreCheck(ctx, t) },
		ErrorCheck:   acctest.ErrorCheck(t, names.AccessAnalyzerServiceID),
		CheckDestroy: testAccCheckAnalyzerDestroy(ctx),
		Steps: []resource.TestStep{
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tags/"),
				ConfigVariables: config.Variables{
					"rName": config.StringVariable(rName),
					"resource_tags": config.MapVariable(map[string]config.Variable{
						"key1": config.StringVariable("value1"),
					}),
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckAnalyzerExists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, acctest.CtOne),
					resource.TestCheckResourceAttr(resourceName, "tags.key1", "value1"),
				),
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tagsComputed1/"),
				ConfigVariables: config.Variables{
					"rName":         config.StringVariable(rName),
					"unknownTagKey": config.StringVariable("key1"),
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckAnalyzerExists(ctx, resourceName, &v),
					resource.TestCheckResourceAttr(resourceName, acctest.CtTagsPercent, acctest.CtOne),
					resource.TestCheckResourceAttrPair(resourceName, "tags.key1", "null_resource.test", names.AttrID),
				),
				ConfigPlanChecks: resource.ConfigPlanChecks{
					PreApply: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction(resourceName, plancheck.ResourceActionUpdate),
						plancheck.ExpectUnknownValue(resourceName, tfjsonpath.New(names.AttrTags)),
					},
					PostApplyPreRefresh: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction(resourceName, plancheck.ResourceActionNoop),
					},
					PostApplyPostRefresh: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction(resourceName, plancheck.ResourceActionNoop),
					},
				},
			},
			{
				ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
				ConfigDirectory:          config.StaticDirectory("testdata/Analyzer/tagsComputed1/"),
				ConfigVariables: config.Variables{
					"rName":         config.StringVariable(rName),
					"unknownTagKey": config.StringVariable("key1"),
				},
				ResourceName:      resourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}
